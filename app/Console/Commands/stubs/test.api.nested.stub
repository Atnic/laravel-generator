<?php

namespace DummyNamespace;

use DummyFullModelClass;
use Illuminate\Support\Facades\Route;
use ParentDummyFullModelClass;
use NamespacedDummyUserModel;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class DummyClass extends TestCase
{
    /**
     * Display a listing of the resource.
     *
     * @return void
     */
    public function testIndex()
    {
        if (!Route::has('dummy_route.index')) { $this->expectNotToPerformAssertions(); return; }
        $user = factory(User::class)->create();

        $this->actingAs($user, 'api');

        $parent_dummy_model_variable = factory(ParentDummyModelClass::class)->create();
        $dummy_model_plural_variable = $parent_dummy_model_variable->dummy_model_plural_variable()->saveMany(factory(DummyModelClass::class, 5)->make([ $parent_dummy_model_variable->getForeignKey() => $parent_dummy_model_variable->getKey() ]));

        $response = $this->getJson(dummy_action_index."?search=lorem");
        if ($response->exception) {
            $this->expectOutputString('');
            $this->setOutputCallback(function () use($response) { return $response->exception; });
            return;
        }
        $response->assertSuccessful();
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return void
     */
    public function testStore()
    {
        if (!Route::has('dummy_route.store')) { $this->expectNotToPerformAssertions(); return; }
        $user = factory(User::class)->create();

        $this->actingAs($user, 'api');

        $parent_dummy_model_variable = factory(ParentDummyModelClass::class)->create();

        $response = $this->postJson(dummy_action_store, factory(DummyModelClass::class)->make([ $parent_dummy_model_variable->getForeignKey() => $parent_dummy_model_variable->getKey() ])->toArray());
        if ($response->exception) {
            $this->expectOutputString('');
            $this->setOutputCallback(function () use($response) { return $response->exception; });
            return;
        }
        $response->assertSuccessful();
    }

    /**
     * Display the specified resource.
     *
     * @return void
     */
    public function testShow()
    {
        if (!Route::has('dummy_route.show')) { $this->expectNotToPerformAssertions(); return; }
        $user = factory(User::class)->create();

        $this->actingAs($user, 'api');

        $parent_dummy_model_variable = factory(ParentDummyModelClass::class)->create();
        $dummy_model_variable = $parent_dummy_model_variable->dummy_model_plural_variable()->save(factory(DummyModelClass::class)->make([ $parent_dummy_model_variable->getForeignKey() => $parent_dummy_model_variable->getKey() ]));

        $response = $this->getJson(dummy_action_show);
        if ($response->exception) {
            $this->expectOutputString('');
            $this->setOutputCallback(function () use($response) { return $response->exception; });
            return;
        }
        $response->assertSuccessful();
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @return void
     */
    public function testUpdate()
    {
        if (!Route::has('dummy_route.update')) { $this->expectNotToPerformAssertions(); return; }
        $user = factory(User::class)->create();

        $this->actingAs($user, 'api');

        $parent_dummy_model_variable = factory(ParentDummyModelClass::class)->create();
        $dummy_model_variable = $parent_dummy_model_variable->dummy_model_plural_variable()->save(factory(DummyModelClass::class)->make([ $parent_dummy_model_variable->getForeignKey() => $parent_dummy_model_variable->getKey() ]));

        $response = $this->putJson(dummy_action_update, factory(DummyModelClass::class)->make([ $parent_dummy_model_variable->getForeignKey() => $parent_dummy_model_variable->getKey() ])->toArray());
        if ($response->exception) {
            $this->expectOutputString('');
            $this->setOutputCallback(function () use($response) { return $response->exception; });
            return;
        }
        $response->assertSuccessful();
    }

    /**
     * Remove the specified resource from storage.
     *
     * @return void
     */
    public function testDestroy()
    {
        if (!Route::has('dummy_route.destroy')) { $this->expectNotToPerformAssertions(); return; }
        $user = factory(User::class)->create();

        $this->actingAs($user, 'api');

        $parent_dummy_model_variable = factory(ParentDummyModelClass::class)->create();
        $dummy_model_variable = $parent_dummy_model_variable->dummy_model_plural_variable()->save(factory(DummyModelClass::class)->make([ $parent_dummy_model_variable->getForeignKey() => $parent_dummy_model_variable->getKey() ]));

        $response = $this->deleteJson(dummy_action_destroy);
        if ($response->exception) {
            $this->expectOutputString('');
            $this->setOutputCallback(function () use($response) { return $response->exception; });
            return;
        }
        $response->assertSuccessful();
    }
}
