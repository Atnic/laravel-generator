<?php

namespace DummyNamespace;

use DummyFullModelClass;
use ParentDummyFullModelClass;
use Illuminate\Http\Request;
use DummyRootNamespaceHttp\Controllers\Controller;
use DummyFullParentClass;

/**
 * DummyClass
 */
class DummyClass extends Controller
{
    /**
     * Relations
     * @param  \Illuminate\Http\Request|null  $request
     * @param  \ParentDummyFullModelClass|null  $parent_dummy_model_variable
     * @param  \DummyFullModelClass|null  $dummy_model_variable
     * @return array
     */
    public static function relations(Request $request = null, ParentDummyModelClass $parent_dummy_model_variable = null, DummyModelClass $dummy_model_variable = null)
    {
        return [
            'parent_dummy_model_variable' => DummyParentClass::relations($request, $parent_dummy_model_variable)['parent_dummy_model_variable'],
            'dummy_model_variable' => [
                'belongsToMany' => [], // also for morphToMany
                'hasMany' => [], // also for morphMany, hasManyThrough
                'hasOne' => [], // also for morphOne
            ]
        ];
    }

    /**
     * Visibles
     * @param  \Illuminate\Http\Request|null  $request
     * @param  \ParentDummyFullModelClass|null  $parent_dummy_model_variable
     * @param  \DummyFullModelClass|null  $dummy_model_variable
     * @return array
     */
    public static function visibles(Request $request = null, ParentDummyModelClass $parent_dummy_model_variable = null, DummyModelClass $dummy_model_variable = null)
    {
        return [
            'parent' => [
                'parent_dummy_model_variable' => DummyParentClass::visibles($request, $parent_dummy_model_variable)['show']['parent_dummy_model_variable']
            ],
            'index' => [
                'dummy_model_variable' => [
                    // TODO: Index visibles, 'label' is optional. Ex:
                    [ 'name' => 'name', 'label' => ucwords(__('dummy_model_plural_variable.name')) ],
                ]
            ],
            'show' => [
                'dummy_model_variable' => [
                    // TODO: Index visibles, 'label' is optional. Ex:
                    [ 'name' => 'name', 'label' => ucwords(__('dummy_model_plural_variable.name')) ],
                ]
            ]
        ];
    }

    /**
     * Fields
     * @param  \Illuminate\Http\Request|null  $request
     * @param  \ParentDummyFullModelClass|null  $parent_dummy_model_variable
     * @param  \DummyFullModelClass|null  $dummy_model_variable
     * @return array
     */
    public static function fields(Request $request = null, ParentDummyModelClass $parent_dummy_model_variable = null, DummyModelClass $dummy_model_variable = null)
    {
        return [
            'create' => [
                'dummy_model_variable' => [
                    // TODO: Create input fields, 'label' is optional,'options' is required when 'type' is select. Ex:
                    [ 'field' => 'input', 'type' => 'text', 'name' => 'name', 'label' => ucwords(__('dummy_model_plural_variable.name')), 'required' => true ],
                ]
            ],
            'edit' => [
                'dummy_model_variable' => [
                    // TODO: Edit input fields, 'label' is optional,'options' is required when 'type' is select. Ex:
                    [ 'field' => 'input', 'type' => 'text', 'name' => 'name', 'label' => ucwords(__('dummy_model_plural_variable.name')) ],
                ]
            ]
        ];
    }

    /**
     * Rules
     * @param  \Illuminate\Http\Request|null  $request
     * @param  \ParentDummyFullModelClass|null  $parent_dummy_model_variable
     * @param  \DummyFullModelClass|null  $dummy_model_variable
     * @return array
     */
    public static function rules(Request $request = null, ParentDummyModelClass $parent_dummy_model_variable = null, DummyModelClass $dummy_model_variable = null)
    {
        return [
            'store' => [
                // TODO: Store rules
                'name' => 'required|string|max:255',
            ],
            'update' => [
                // TODO: Update rules
                'name' => 'string|max:255',
            ]
        ];
    }

    /**
    * Instantiate a new controller instance.
    *
    * @return void
    */
    public function __construct()
    {
        // TODO: Add/Remove middleware as needed
        $this->middleware('auth');
    }

    /**
     * Display a listing of the resource.
     *
     * @param  \ParentDummyFullModelClass  $parent_dummy_model_variable
     * @return \Illuminate\Http\Response
     */
    public function index(ParentDummyModelClass $parent_dummy_model_variable)
    {
        $this->authorize('view', $parent_dummy_model_variable);
        $dummy_model_plural_variable = DummyModelClass::filter()
            ->where($parent_dummy_model_variable->getForeignKey(), $parent_dummy_model_variable->getKey())
            ->paginate()->appends(request()->query());
        $this->authorize('index', 'DummyFullModelClass');

        return response()->view('dummy_view.index', [
            'parent_dummy_model_variable' => $parent_dummy_model_variable,
            'dummy_model_plural_variable' => $dummy_model_plural_variable,
            'relations' => self::relations(request(), $parent_dummy_model_variable),
            'visibles' => array_merge(self::visibles(request(), $parent_dummy_model_variable)['parent'], self::visibles(request(), $parent_dummy_model_variable)['index']),
        ]);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @param  \ParentDummyFullModelClass  $parent_dummy_model_variable
     * @return \Illuminate\Http\Response
     */
    public function create(ParentDummyModelClass $parent_dummy_model_variable)
    {
        $this->authorize('update', $parent_dummy_model_variable);
        $this->authorize('create', 'DummyFullModelClass');

        return response()->view('dummy_view.create', [
            'parent_dummy_model_variable' => $parent_dummy_model_variable,
            'relations' => self::relations(request(), $parent_dummy_model_variable),
            'visibles' => self::visibles(request(), $parent_dummy_model_variable)['parent'],
            'fields' => self::fields(request(), $parent_dummy_model_variable)['create']
        ]);
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \ParentDummyFullModelClass  $parent_dummy_model_variable
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request, ParentDummyModelClass $parent_dummy_model_variable)
    {
        $this->authorize('update', $parent_dummy_model_variable);
        $this->authorize('create', 'DummyFullModelClass');
        $request->validate(self::rules($request, $parent_dummy_model_variable)['store']);

        $dummy_model_variable = new DummyModelClass;
        foreach (self::rules($request, $parent_dummy_model_variable)['store'] as $key => $value) {
            if (str_contains($value, [ 'file', 'image', 'mimetypes', 'mimes' ])) {
                if ($request->hasFile($key)) {
                    $dummy_model_variable->{$key} = $request->file($key)->store('dummy_model_plural_variable');
                } elseif ($request->exists($key)) {
                    $dummy_model_variable->{$key} = $request->{$key};
                }
            } elseif ($request->exists($key)) {
                $dummy_model_variable->{$key} = $request->{$key};
            }
        }
        $dummy_model_variable->parent_dummy_model_variable()->associate($parent_dummy_model_variable);
        // TODO: Add custom logic if any
        $dummy_model_variable->save();

        if (request()->filled('redirect') && starts_with(request()->redirect, request()->root()))
            $response = response()->redirectTo(request()->redirect);
        else
            $response = response()->redirectToRoute('dummy_route.show', [ $parent_dummy_model_variable->getKey(), $dummy_model_variable->getKey() ]);

        return $response->withInput([
            $parent_dummy_model_variable->getForeignKey() => $parent_dummy_model_variable->getKey(),
            $dummy_model_variable->getForeignKey() => $dummy_model_variable->getKey(),
        ])->with('status', __('Success'));
    }

    /**
     * Display the specified resource.
     *
     * @param  \ParentDummyFullModelClass  $parent_dummy_model_variable
     * @param  \DummyFullModelClass  $dummy_model_variable
     * @return \Illuminate\Http\Response
     */
    public function show(ParentDummyModelClass $parent_dummy_model_variable, DummyModelClass $dummy_model_variable)
    {
        $parent_dummy_model_variable->dummy_model_plural_variable()->findOrFail($dummy_model_variable->getKey());
        $this->authorize('view', $parent_dummy_model_variable);
        $this->authorize('view', $dummy_model_variable);

        return response()->view('dummy_view.show', [
            'parent_dummy_model_variable' => $parent_dummy_model_variable,
            'dummy_model_variable' => $dummy_model_variable,
            'relations' => self::relations(request(), $parent_dummy_model_variable, $dummy_model_variable),
            'visibles' => array_merge(self::visibles(request(), $parent_dummy_model_variable, $dummy_model_variable)['parent'], self::visibles(request(), $parent_dummy_model_variable, $dummy_model_variable)['show'])
        ]);
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  \ParentDummyFullModelClass  $parent_dummy_model_variable
     * @param  \DummyFullModelClass  $dummy_model_variable
     * @return \Illuminate\Http\Response
     */
    public function edit(ParentDummyModelClass $parent_dummy_model_variable, DummyModelClass $dummy_model_variable)
    {
        $parent_dummy_model_variable->dummy_model_plural_variable()->findOrFail($dummy_model_variable->getKey());
        $this->authorize('update', $parent_dummy_model_variable);
        $this->authorize('update', $dummy_model_variable);

        return response()->view('dummy_view.edit', [
            'parent_dummy_model_variable' => $parent_dummy_model_variable,
            'dummy_model_variable' => $dummy_model_variable,
            'relations' => self::relations(request(), $parent_dummy_model_variable, $dummy_model_variable),
            'visibles' => self::visibles(request(), $parent_dummy_model_variable, $dummy_model_variable)['parent'],
            'fields' => self::fields(request(), $parent_dummy_model_variable, $dummy_model_variable)['edit']
        ]);
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \ParentDummyFullModelClass  $parent_dummy_model_variable
     * @param  \DummyFullModelClass  $dummy_model_variable
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, ParentDummyModelClass $parent_dummy_model_variable, DummyModelClass $dummy_model_variable)
    {
        $parent_dummy_model_variable->dummy_model_plural_variable()->findOrFail($dummy_model_variable->getKey());

        // TODO: Add authorize for relation if any
        $this->authorize('update', $parent_dummy_model_variable);
        $this->authorize('update', $dummy_model_variable);
        $request->validate(self::rules($request, $parent_dummy_model_variable, $dummy_model_variable)['update']);

        foreach (self::rules($request, $parent_dummy_model_variable, $dummy_model_variable)['update'] as $key => $value) {
            if (str_contains($value, [ 'file', 'image', 'mimetypes', 'mimes' ])) {
                if ($request->hasFile($key)) {
                    $dummy_model_variable->{$key} = $request->file($key)->store('dummy_model_plural_variable');
                } elseif ($request->exists($key)) {
                    $dummy_model_variable->{$key} = $request->{$key};
                }
            } elseif ($request->exists($key)) {
                $dummy_model_variable->{$key} = $request->{$key};
            }
        }
        $dummy_model_variable->parent_dummy_model_variable()->associate($parent_dummy_model_variable);
        // TODO: Add custom logic if any
        $dummy_model_variable->save();

        if (request()->filled('redirect') && starts_with(request()->redirect, request()->root()))
            $response = response()->redirectTo(request()->redirect);
        else
            $response = response()->redirectToRoute('dummy_route.show', [ $parent_dummy_model_variable->getKey(), $dummy_model_variable->getKey() ]);

        return $response->withInput([
            $parent_dummy_model_variable->getForeignKey() => $parent_dummy_model_variable->getKey(),
            $dummy_model_variable->getForeignKey() => $dummy_model_variable->getKey(),
        ])->with('status', __('Success'));
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \ParentDummyFullModelClass  $parent_dummy_model_variable
     * @param  \DummyFullModelClass  $dummy_model_variable
     * @return \Illuminate\Http\Response
     */
    public function destroy(ParentDummyModelClass $parent_dummy_model_variable, DummyModelClass $dummy_model_variable)
    {
        $parent_dummy_model_variable->dummy_model_plural_variable()->findOrFail($dummy_model_variable->getKey());
        $this->authorize('update', $parent_dummy_model_variable);
        $this->authorize('delete', $dummy_model_variable);
        $dummy_model_variable->delete();

        if (request()->filled('redirect') && starts_with(request()->redirect, request()->root()) && !str_contains(request()->redirect, '/'.array_last(explode('.', 'dummy_route')).'/'.$dummy_model_variable->getKey()))
            $response = response()->redirectTo(request()->redirect);
        else
            $response = response()->redirectToRoute('dummy_route.index', $parent_dummy_model_variable->getKey());

        return $response->with('status', __('Success'));
    }
}
