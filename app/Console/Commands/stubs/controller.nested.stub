<?php

namespace DummyNamespace;

use DummyFullModelClass;
use ParentDummyFullModelClass;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;
use DummyRootNamespaceHttp\Controllers\Controller;
use DummyFullParentClass;

/**
 * DummyClass
 */
class DummyClass extends Controller
{
    /**
     * Relations
     * @param  \Illuminate\Http\Request|null $request
     * @param ParentDummyModelClass $parent_dummy_model_variable
     * @param DummyModelClass $dummy_model_variable
     * @return array
     */
    public static function relations(Request $request = null, ParentDummyModelClass $parent_dummy_model_variable = null, DummyModelClass $dummy_model_variable = null)
    {
        return [
            'parent_dummy_model_variable' => DummyParentClass::relations($request, $parent_dummy_model_variable)['parent_dummy_model_variable'],
            'dummy_model_variable' => [
                'belongsToMany' => [], // also for morphToMany
                'hasMany' => [], // also for morphMany, hasManyThrough
                'hasOne' => [], // also for morphOne
            ]
        ];
    }

    /**
     * Visibles
     * @param  \Illuminate\Http\Request|null $request
     * @param ParentDummyModelClass $parent_dummy_model_variable
     * @param DummyModelClass $dummy_model_variable
     * @return array
     */
    public static function visibles(Request $request = null, ParentDummyModelClass $parent_dummy_model_variable = null, DummyModelClass $dummy_model_variable = null)
    {
        return [
            'parent' => [
                'parent_dummy_model_variable' => DummyParentClass::visibles($request, $parent_dummy_model_variable)['show']['parent_dummy_model_variable']
            ],
            'index' => [
                'dummy_model_variable' => [
                    [ 'name' => 'name', 'label' => ucwords(__('dummy_model_plural_variable.name')) ],
                ]
            ],
            'show' => [
                'dummy_model_variable' => [
                    [ 'name' => 'name', 'label' => ucwords(__('dummy_model_plural_variable.name')) ],
                ]
            ]
        ];
    }

    /**
     * Fields
     * @param  \Illuminate\Http\Request|null $request
     * @param ParentDummyModelClass $parent_dummy_model_variable
     * @param DummyModelClass $dummy_model_variable
     * @return array
     */
    public static function fields(Request $request = null, ParentDummyModelClass $parent_dummy_model_variable = null, DummyModelClass $dummy_model_variable = null)
    {
        return [
            'create' => [
                'dummy_model_variable' => [
                    [ 'field' => 'input', 'type' => 'text', 'name' => 'name', 'label' => ucwords(__('dummy_model_plural_variable.name')), 'required' => true ],
                ]
            ],
            'edit' => [
                'dummy_model_variable' => [
                    [ 'field' => 'input', 'type' => 'text', 'name' => 'name', 'label' => ucwords(__('dummy_model_plural_variable.name')) ],
                ]
            ]
        ];
    }

    /**
     * Rules
     * @param  \Illuminate\Http\Request|null $request
     * @param ParentDummyModelClass $parent_dummy_model_variable
     * @param DummyModelClass $dummy_model_variable
     * @return array
     */
    public static function rules(Request $request = null, ParentDummyModelClass $parent_dummy_model_variable = null, DummyModelClass $dummy_model_variable = null)
    {
        return [
            'hasMany' => [
                //'relations' => [
                //    'relations.*.name' => 'required_without:relations.*.id|string|max:255'
                //]
            ],
            'hasOne' => [
                //'relation' => [
                //    'relation.name' => 'required_without:relation.id|string|max:255'
                //]
            ],
            'store' => [
                'name' => 'required|string|max:255',
            ],
            'update' => [
                'name' => 'string|max:255',
            ]
        ];
    }

    /**
    * Instantiate a new controller instance.
    *
    * @return void
    */
    public function __construct()
    {
        $this->middleware('auth');
    }

    /**
     * Display a listing of the resource.
     *
     * @param ParentDummyModelClass $parent_dummy_model_variable
     * @return \Illuminate\Http\Response
     * @throws \Illuminate\Auth\Access\AuthorizationException
     */
    public function index(ParentDummyModelClass $parent_dummy_model_variable)
    {
        $dummy_model_plural_variable = DummyModelClass::filter()
            ->where((new DummyModelClass)->qualifyColumn($parent_dummy_model_variable->getForeignKey()), $parent_dummy_model_variable->getKey())
            ->paginate()->appends(request()->query());
        $this->authorize('index', [ 'DummyFullModelClass', $parent_dummy_model_variable ]);

        return response()->view('dummy_view.index', [
            'parent_dummy_model_variable' => $parent_dummy_model_variable,
            'dummy_model_plural_variable' => $dummy_model_plural_variable,
            'relations' => self::relations(request(), $parent_dummy_model_variable),
            'visibles' => array_merge(self::visibles(request(), $parent_dummy_model_variable)['parent'], self::visibles(request(), $parent_dummy_model_variable)['index']),
        ]);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @param ParentDummyModelClass $parent_dummy_model_variable
     * @return \Illuminate\Http\Response
     * @throws \Illuminate\Auth\Access\AuthorizationException
     */
    public function create(ParentDummyModelClass $parent_dummy_model_variable)
    {
        $this->authorize('create', [ 'DummyFullModelClass', $parent_dummy_model_variable ]);

        return response()->view('dummy_view.create', [
            'parent_dummy_model_variable' => $parent_dummy_model_variable,
            'relations' => self::relations(request(), $parent_dummy_model_variable),
            'visibles' => self::visibles(request(), $parent_dummy_model_variable)['parent'],
            'fields' => self::fields(request(), $parent_dummy_model_variable)['create']
        ]);
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request $request
     * @param ParentDummyModelClass $parent_dummy_model_variable
     * @return \Illuminate\Http\Response
     * @throws \Illuminate\Auth\Access\AuthorizationException
     */
    public function store(Request $request, ParentDummyModelClass $parent_dummy_model_variable)
    {
        $this->authorize('create', [ 'DummyFullModelClass', $parent_dummy_model_variable ]);
        $request->validate(self::rules($request, $parent_dummy_model_variable)['store']);
        foreach (self::rules($request)['hasMany'] as $key => $rule)
            $request->validate(array_merge([ $key => 'array' ], $rule));
        foreach (self::rules($request)['hasOne'] as $key => $rule)
            $request->validate(array_merge([ $key => 'array' ], $rule));

        $dummy_model_variable = new DummyModelClass;
        foreach (self::rules($request, $parent_dummy_model_variable)['store'] as $key => $value) {
            if (Str::contains($value, [ 'file', 'image', 'mimetypes', 'mimes' ])) {
                if ($request->hasFile($key)) {
                    $dummy_model_variable->{$key} = $request->file($key)->store('dummy_model_plural_variable');
                } elseif ($request->exists($key)) {
                    $dummy_model_variable->{$key} = $request->{$key};
                }
            } elseif ($request->exists($key)) {
                $dummy_model_variable->{$key} = $request->{$key};
            }
        }

        $deletedModels = [];
        $hasMany = [];
        foreach (self::rules($request)['hasMany'] as $key => $rule) {
            $hasMany[$key] = [];
            if ($request->exists($key)) {
                /** @var Model $model */
                $model = $dummy_model_variable->{$key}()->getRelated();
                /** @var Collection $models */
                $models = $model->newQuery()->findMany(collect($request->all()[$key] ?? [])->map(function ($data) use($model) {
                    return $data[$model->getKeyName()] ?? null;
                })->filter());
                foreach ($request->all()[$key] ?? [] as $index => $data) {
                    /** @var Model $model */
                    $model = $dummy_model_variable->{$key}()->getRelated();
                    if (isset($data[$model->getKeyName()])) $model = $models->find($data[$model->getKeyName()]) ?: $model;
                    if (isset($data['_action']) && in_array($data['_action'], [ 'delete', 'destroy' ])) {
                        if ($model->exists) $deletedModels[] = $model;
                        continue;
                    }
                    foreach ($rule as $k => $value) {
                        $attribute = last(explode('.*.', $k));
                        $k = str_replace('*', $index, $k);
                        if (str_contains($value, ['file', 'image', 'mimetypes', 'mimes'])) {
                            if ($request->hasFile($k)) {
                                $model->{$attribute} = $request->file($k)->storePublicly($key);
                            } elseif ($request->exists($k)) {
                                $model->{$attribute} = $request->input($k);
                            }
                        } elseif ($request->exists($k)) {
                            $model->{$attribute} = $request->input($k);
                        }
                    }
                    $hasMany[$key][] = $model;
                }
            }
        }
        $hasOne = [];
        foreach (self::rules($request)['hasOne'] as $key => $rule) {
            if ($request->exists($key)) {
                /** @var Model $model */
                $model = $dummy_model_variable->{$key}()->getRelated();
                $data = $request->all()[$key];
                if (isset($data[$model->getKeyName()]))
                    $model = $model->newQuery()->find(($request->all()[$key] ?? [])[$model->getKeyName()] ?? null) ?: $model;
                if (isset($data['_action']) && in_array($data['_action'], [ 'delete', 'destroy' ])) {
                    if ($model->exists) $deletedModels[] = $model;
                    continue;
                }
                foreach ($rule as $k => $value) {
                    $attribute = last(explode('.', $k));
                    if (str_contains($value, ['file', 'image', 'mimetypes', 'mimes'])) {
                        if ($request->hasFile($k)) {
                            $model->{$attribute} = $request->file($k)->storePublicly($key);
                        } elseif ($request->exists($k)) {
                            $model->{$attribute} = $request->input($k);
                        }
                    } elseif ($request->exists($k)) {
                        $model->{$attribute} = $request->input($k);
                    }
                }
                $hasOne[$key] = $model;
            }
        }

        try {
            DB::beginTransaction();
            $dummy_model_variable->parent_dummy_model_variable()->associate($parent_dummy_model_variable);
            $dummy_model_variable->save();
            foreach (self::rules($request)['hasMany'] as $key => $rule) {
                if (!$request->exists($key)) continue;
                $models = $dummy_model_variable->{$key}()->saveMany($hasMany[$key]);
                $dummy_model_variable->setRelation($key, new Collection($models));
            }
            foreach (self::rules($request)['hasOne'] as $key => $rule) {
                if (!$request->exists($key) || empty($hasOne[$key])) continue;
                $model = $dummy_model_variable->{$key}()->save($hasOne[$key]);
                $dummy_model_variable->setRelation($key, $model);
            }
            foreach ($deletedModels as $model) $model->delete();
            DB::commit();
        } catch (Exception $exception) {
            DB::rollBack();
            return back()->withInput()->with('status', $exception->getMessage())->with('status-type', 'danger');
        }

        if (request()->filled('redirect') && starts_with(request()->redirect, request()->root()))
            $response = response()->redirectTo(request()->redirect);
        else
            $response = response()->redirectToRoute('dummy_route.show', [ $parent_dummy_model_variable->getKey(), $dummy_model_variable->getKey() ]);

        return $response->withInput([
            $parent_dummy_model_variable->getForeignKey() => $parent_dummy_model_variable->getKey(),
            $dummy_model_variable->getForeignKey() => $dummy_model_variable->getKey(),
        ])->with('status', __('Success'));
    }

    /**
     * Display the specified resource.
     *
     * @param ParentDummyModelClass $parent_dummy_model_variable
     * @param DummyModelClass $dummy_model_variable
     * @return \Illuminate\Http\Response
     * @throws \Illuminate\Auth\Access\AuthorizationException
     */
    public function show(ParentDummyModelClass $parent_dummy_model_variable, DummyModelClass $dummy_model_variable)
    {
        $parent_dummy_model_variable->dummy_model_plural_variable()->findOrFail($dummy_model_variable->getKey());
        $this->authorize('view', [ $dummy_model_variable, $parent_dummy_model_variable ]);

        return response()->view('dummy_view.show', [
            'parent_dummy_model_variable' => $parent_dummy_model_variable,
            'dummy_model_variable' => $dummy_model_variable,
            'relations' => self::relations(request(), $parent_dummy_model_variable, $dummy_model_variable),
            'visibles' => array_merge(self::visibles(request(), $parent_dummy_model_variable, $dummy_model_variable)['parent'], self::visibles(request(), $parent_dummy_model_variable, $dummy_model_variable)['show'])
        ]);
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param ParentDummyModelClass $parent_dummy_model_variable
     * @param DummyModelClass $dummy_model_variable
     * @return \Illuminate\Http\Response
     * @throws \Illuminate\Auth\Access\AuthorizationException
     */
    public function edit(ParentDummyModelClass $parent_dummy_model_variable, DummyModelClass $dummy_model_variable)
    {
        $parent_dummy_model_variable->dummy_model_plural_variable()->findOrFail($dummy_model_variable->getKey());
        $this->authorize('update', [ $dummy_model_variable, $parent_dummy_model_variable ]);

        return response()->view('dummy_view.edit', [
            'parent_dummy_model_variable' => $parent_dummy_model_variable,
            'dummy_model_variable' => $dummy_model_variable,
            'relations' => self::relations(request(), $parent_dummy_model_variable, $dummy_model_variable),
            'visibles' => self::visibles(request(), $parent_dummy_model_variable, $dummy_model_variable)['parent'],
            'fields' => self::fields(request(), $parent_dummy_model_variable, $dummy_model_variable)['edit']
        ]);
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request $request
     * @param ParentDummyModelClass $parent_dummy_model_variable
     * @param DummyModelClass $dummy_model_variable
     * @return \Illuminate\Http\Response
     * @throws \Illuminate\Auth\Access\AuthorizationException
     */
    public function update(Request $request, ParentDummyModelClass $parent_dummy_model_variable, DummyModelClass $dummy_model_variable)
    {
        $parent_dummy_model_variable->dummy_model_plural_variable()->findOrFail($dummy_model_variable->getKey());

        $this->authorize('update', [ $dummy_model_variable, $parent_dummy_model_variable ]);
        $request->validate(self::rules($request, $parent_dummy_model_variable, $dummy_model_variable)['update']);
        foreach (self::rules($request, $dummy_model_variable)['hasMany'] as $key => $rule)
            $request->validate(array_merge([ $key => 'array' ], $rule));
        foreach (self::rules($request, $dummy_model_variable)['hasOne'] as $key => $rule)
            $request->validate(array_merge([ $key => 'array' ], $rule));

        foreach (self::rules($request, $parent_dummy_model_variable, $dummy_model_variable)['update'] as $key => $value) {
            if (Str::contains($value, [ 'file', 'image', 'mimetypes', 'mimes' ])) {
                if ($request->hasFile($key)) {
                    $dummy_model_variable->{$key} = $request->file($key)->store('dummy_model_plural_variable');
                } elseif ($request->exists($key)) {
                    $dummy_model_variable->{$key} = $request->{$key};
                }
            } elseif ($request->exists($key)) {
                $dummy_model_variable->{$key} = $request->{$key};
            }
        }

        $deletedModels = [];
        $hasMany = [];
        foreach (self::rules($request)['hasMany'] as $key => $rule) {
            $hasMany[$key] = [];
            if ($request->exists($key)) {
                /** @var Model $model */
                $model = $dummy_model_variable->{$key}()->getRelated();
                /** @var Collection $models */
                $models = $model->newQuery()->findMany(collect($request->all()[$key] ?? [])->map(function ($data) use($model) {
                    return $data[$model->getKeyName()] ?? null;
                })->filter());
                foreach ($request->all()[$key] ?? [] as $index => $data) {
                    /** @var Model $model */
                    $model = $dummy_model_variable->{$key}()->getRelated();
                    if (isset($data[$model->getKeyName()])) $model = $models->find($data[$model->getKeyName()]) ?: $model;
                    if (isset($data['_action']) && in_array($data['_action'], [ 'delete', 'destroy' ])) {
                        if ($model->exists) $deletedModels[] = $model;
                        continue;
                    }
                    foreach ($rule as $k => $value) {
                        $attribute = last(explode('.*.', $k));
                        $k = str_replace('*', $index, $k);
                        if (str_contains($value, ['file', 'image', 'mimetypes', 'mimes'])) {
                            if ($request->hasFile($k)) {
                                $model->{$attribute} = $request->file($k)->storePublicly($key);
                            } elseif ($request->exists($k)) {
                                $model->{$attribute} = $request->input($k);
                            }
                        } elseif ($request->exists($k)) {
                            $model->{$attribute} = $request->input($k);
                        }
                    }
                    $hasMany[$key][] = $model;
                }
            }
        }
        $hasOne = [];
        foreach (self::rules($request)['hasOne'] as $key => $rule) {
            if ($request->exists($key)) {
                /** @var Model $model */
                $model = $dummy_model_variable->{$key}()->getRelated();
                $data = $request->all()[$key];
                if (isset($data[$model->getKeyName()]))
                    $model = $model->newQuery()->find(($request->all()[$key] ?? [])[$model->getKeyName()] ?? null) ?: $model;
                if (isset($data['_action']) && in_array($data['_action'], [ 'delete', 'destroy' ])) {
                    if ($model->exists) $deletedModels[] = $model;
                    continue;
                }
                foreach ($rule as $k => $value) {
                    $attribute = last(explode('.', $k));
                    if (str_contains($value, ['file', 'image', 'mimetypes', 'mimes'])) {
                        if ($request->hasFile($k)) {
                            $model->{$attribute} = $request->file($k)->storePublicly($key);
                        } elseif ($request->exists($k)) {
                            $model->{$attribute} = $request->input($k);
                        }
                    } elseif ($request->exists($k)) {
                        $model->{$attribute} = $request->input($k);
                    }
                }
                $hasOne[$key] = $model;
            }
        }

        try {
            DB::beginTransaction();
            $dummy_model_variable->parent_dummy_model_variable()->associate($parent_dummy_model_variable);
            $dummy_model_variable->save();
            foreach (self::rules($request)['hasMany'] as $key => $rule) {
                if (!$request->exists($key)) continue;
                $models = $dummy_model_variable->{$key}()->saveMany($hasMany[$key]);
                $dummy_model_variable->setRelation($key, new Collection($models));
            }
            foreach (self::rules($request)['hasOne'] as $key => $rule) {
                if (!$request->exists($key) || empty($hasOne[$key])) continue;
                $model = $dummy_model_variable->{$key}()->save($hasOne[$key]);
                $dummy_model_variable->setRelation($key, $model);
            }
            foreach ($deletedModels as $model) $model->delete();
            DB::commit();
        } catch (Exception $exception) {
            DB::rollBack();
            return back()->withInput()->with('status', $exception->getMessage())->with('status-type', 'danger');
        }

        if (request()->filled('redirect') && starts_with(request()->redirect, request()->root()))
            $response = response()->redirectTo(request()->redirect);
        else
            $response = response()->redirectToRoute('dummy_route.show', [ $parent_dummy_model_variable->getKey(), $dummy_model_variable->getKey() ]);

        return $response->withInput([
            $parent_dummy_model_variable->getForeignKey() => $parent_dummy_model_variable->getKey(),
            $dummy_model_variable->getForeignKey() => $dummy_model_variable->getKey(),
        ])->with('status', __('Success'));
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \ParentDummyFullModelClass  $parent_dummy_model_variable
     * @param  \DummyFullModelClass  $dummy_model_variable
     * @return \Illuminate\Http\Response
     * @throws \Illuminate\Auth\Access\AuthorizationException
     * @throws \Exception
     */
    public function destroy(ParentDummyModelClass $parent_dummy_model_variable, DummyModelClass $dummy_model_variable)
    {
        $parent_dummy_model_variable->dummy_model_plural_variable()->findOrFail($dummy_model_variable->getKey());
        $this->authorize('delete', [ $dummy_model_variable, $parent_dummy_model_variable ]);
        $dummy_model_variable->delete();

        if (request()->filled('redirect') && starts_with(request()->redirect, request()->root()) && !Str::contains(request()->redirect, '/'.array_last(explode('.', 'dummy_route')).'/'.$dummy_model_variable->getKey()))
            $response = response()->redirectTo(request()->redirect);
        else
            $response = response()->redirectToRoute('dummy_route.index', $parent_dummy_model_variable->getKey());

        return $response->with('status', __('Success'));
    }
}
